console.log('hello')
//#1 Question 1
let a = [1, 2, 3, 4, 5, 6];
a[a.length - 1]++;
a[1]++;
console.log(a)

//#2 Question 2

async function foo() {
    return true;
}
const flag = foo();
console.log(flag);

//#3 Question 3

let arr1 = [1, 2, 3, 4, 5, 6, 7, null, 8, 9]
const newArr = arr1.map(element => {
    if (element > 3) {
        console.log({ element });
        return element
    }
})
console.log({ newArr });
console.log({ arr1 });
console.log(newArr.length === arr1.length)

//#4 Question 4
var i = 0;
const arr2 = ["a", "b", "c"];
for (i = 0; i < arr2.length; i++) {
    setTimeout(function () {
        console.log(i)
        console.log(arr2[i])
    }, 1000)
}
console.log(i)
//#5 Question 5

const getAPiData = async () => {
    await fetch('https://jsonplaceholder.typicode.com/todos').then(async (res) => {
        const data = await res.json()
        const newData = data.map((d) => d.title)
        console.log(newData.length);
        return newData

    })

}
const PostData = { userId: 5000, id: 5000, title: 'My Title', completed: false }
const pstAPiData = async () => {
    const postapiRes = await fetch('https://jsonplaceholder.typicode.com/todos', {
        method: 'POST',
        data: PostData
    })

    let dd = await postapiRes.json()
    let newData = addSomeMoreItem(dd)
    console.log(newData);
}

const addSomeMoreItem = (res) => {
    let newRes = { ...res, status: 200, msg: 'Data posted Successful' }
    return newRes
}
getAPiData()
pstAPiData().then(() => {
    getAPiData()
})

JavaScript Task:
Objective: Write a function to check for duplicates in an array.
Requirements:
The function should return false if the array contains any duplicate values.
The function should return true if all values in the array are unique.
Do not use any array methods such as Set, map, forEach, etc.
Examples:
Input: [1, 2, 3, 4, 5, 1, 2]
Output: false
Input: [1, 2, 3, 4, 5]
Output: true
function checkArrayDuplicate(arr){
// Write your code here
}
console.log(checkArrayDuplicate([1, 2, 3, 4, 5, 1, 2])); // false
console.log(checkArrayDuplicate([1, 2, 3, 4, 5])); //true



function checkArrayDuplicate(arr) {
    for (let i = 0; i < arr.length; i++) {
        for (let j = i + 1; j < arr.length; j++) {
            if (arr[i] === arr[j]) {
                // console.log('isDuplicate', i, j, arr[i], arr[j])
                return false
                break
            }
        }

    }
    return true
}

console.log(checkArrayDuplicate([1, 2, 3, 4, 5, 1, 2])); // false
console.log(checkArrayDuplicate([1, 2, 3, 4, 5])); //true
Question 1-------------------
//ensure that the console logs appear in the sequence 1, 2, 3, 4,
function sloppyTime() {
  setTimeout(()=> console.log(1),2000);
  console.log(2);
  setTimeout(()=> console.log(3),0);
  console.log(4);
};
----------------------Question end Here-----------------------------------
const delay = (ms) => {
    return new Promise((resolve) => {
        setTimeout(resolve, ms)
    })
}
async function sloppyTime() {
    await delay(2000)
    console.log(1)
    console.log(2);
    await delay(0)
    console.log(3)
    console.log(4);
};
sloppyTime()
Question 2-------------------
//what will log or Error
function func1() {
  setTimeout(()=>{
    console.log(x);
    console.log(y);
  },3000);

  var x = 2;
  let y = 12;
}
----------------------Question end Here-----------------------------------
function func1() {
  setTimeout(()=>{
    console.log(x);// 2
    console.log(y);// 12
  },3000);

  var x = 2;
  let y = 12;
}
Question 3-------------------
//what will log and why
for (var i = 1; i < 4; i++) {
    setTimeout(() => {
        console.log(i)
    }, 3000)
}
Question 4-------------------
//what will log and why
for (let i = 1; i < 4; i++) {
    setTimeout(() => {
        console.log(i)
    }, 3000)
}
----------------------Question end Here-----------------------------------
Q3=>4,4,4
Q4=>1,2,3
Question 5-------------------
//Logical Execution Order:
FROM - JOIN - ON - WHERE - HAVING - GROUP BY - LIMIT - SELECT - ORDER BY
----------------------Question end Here-----------------------------------
FROM
JOIN
ON
WHERE
GROUP BY
HAVING
SELECT
ORDER BY
LIMIT
----------------------------
SELECT 
    e.name AS employee_name, 
    d.name AS department_name, 
    e.salary 
FROM 
    employees e
JOIN 
    departments d ON e.department_id = d.id
WHERE 
    e.salary > 50000
GROUP BY 
    d.name
HAVING 
    AVG(e.salary) > 60000
ORDER BY 
    AVG(e.salary) DESC
LIMIT 10;
-----------------------------------------
Question 6-Group by age------------------
const array=[
    {
        name:"RK Singh 1",age:30
    },
    {
        name:"RK Singh 2",age:40
    },
    {
        name:"RK Singh 3",age:50
    },
    {
        name:"RK Singh 4",age:30
    },
    {
        name:"RK Singh 5",age:40
    },
    {
        name:"RK Singh 6",age:50
    },
    {
        name:"RK Singh 7",age:30
    },
]
solution 1-----------------------
//  let dd= array.reduce((result, currentValue) => {
//     (result[currentValue['age']] = result[currentValue['age']] || []).push(currentValue);
//     return result;
//   }, {});
//   console.log(dd);
  solution 2-----------------------
const groupedItems = array.reduce((pre, curr) => {
    if (!pre[curr.age]) {
      pre[curr.age] = [];
    }
    
    pre[curr.age].push(curr);
    
    return pre;
  }, {});
  
  console.log(groupedItems);
-----------------------------------------
Question 7-Gauss output order------------------

  console.log('A');

setTimeout(() => console.log('B'), 0);

Promise.resolve().then(() =>
    console.log('C')).then(() => {
        setTimeout(() => console.log('D'), 0);
    });

setTimeout(() => console.log('E'), 0);

Promise.resolve().then(() => console.log('F'));

console.log('G');


//------------------------output 
    (async function() {
        console.log(2);
        var x=await 5
        console.log(4);
        
    })();
    
    console.log(3);
